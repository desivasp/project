import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator


data_dir = 'path_to_dataset_directory'

def load_images_and_labels(data_dir):
    images = []
    labels = []
    label_map = {'COVID': 0, 'Lung_Opacity': 1, 'Normal': 2, 'Viral Pneumonia': 3}

    for folder_name in os.listdir(data_dir):
        folder_path = os.path.join(data_dir, folder_name)
        for file_name in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file_name)
            if file_path.endswith('.jpeg') or file_path.endswith('.jpg'):
                # Membaca dan memproses gambar
                image = cv2.imread(file_path)
                image = cv2.resize(image, (128, 128))  # Ubah ukuran sesuai kebutuhan
                image = image / 255.0  # Normalisasi
                images.append(image)
                labels.append(label_map[folder_name])
    
    return np.array(images), np.array(labels)

# Memuat data
X, y = load_images_and_labels(data_dir)

# Pembagian data untuk pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Data augmentation
train_datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator()

# Model CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(4, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Pelatihan model
history = model.fit(
    train_datagen.flow(X_train, y_train, batch_size=32),
    epochs=20,
    validation_data=test_datagen.flow(X_test, y_test),
    steps_per_epoch=len(X_train) // 32,
    validation_steps=len(X_test) // 32
)

# Evaluasi model
test_loss, test_acc = model.evaluate(test_datagen.flow(X_test, y_test))
print(f"Test Accuracy: {test_acc:.4f}")

# Visualisasi hasil pelatihan
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.title('Model Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.ylim([0, max(history.history['loss'] + history.history['val_loss'])])
plt.legend(loc='upper right')
plt.title('Model Loss')

plt.show()
