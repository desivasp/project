import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import librosa
import librosa.display
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns

# Mengatur path ke direktori dataset
data_dir = 'path_to_dataset_directory'

# Mengumpulkan data
def load_data(data_dir):
    features = []
    labels = []
    for filename in os.listdir(data_dir):
        if filename.endswith('.wav'):
            # Load audio file
            filepath = os.path.join(data_dir, filename)
            signal, sr = librosa.load(filepath, sr=None)
            
            # Ekstrak fitur (contoh: MFCC)
            mfccs = librosa.feature.mfcc(signal, sr=sr)
            mfccs_mean = np.mean(mfccs, axis=1)
            
            # Menentukan label dari nama file (misalnya, 'normal' atau 'abnormal')
            label = filename.split('_')[0]  # Mengambil label dari nama file
            features.append(mfccs_mean)
            labels.append(label)
    
    return np.array(features), np.array(labels)

# Memuat data
X, y = load_data(data_dir)

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalisasi data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# model klasifikasi
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Evaluasi
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

def plot_waveform(signal, sr):
    plt.figure(figsize=(14, 5))
    librosa.display.waveshow(signal, sr=sr)
    plt.title('Waveform')
    plt.show()

example_file = 'audio_file.wav'
signal, sr = librosa.load(example_file, sr=None)
plot_waveform(signal, sr)
